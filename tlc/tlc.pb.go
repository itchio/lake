// Code generated by protoc-gen-go.
// source: tlc/tlc.proto
// DO NOT EDIT!

/*
Package tlc is a generated protocol buffer package.

It is generated from these files:
	tlc/tlc.proto

It has these top-level messages:
	Container
	Dir
	File
	Symlink
*/
package tlc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type Container struct {
	Files    []*File    `protobuf:"bytes,1,rep,name=files" json:"files,omitempty"`
	Dirs     []*Dir     `protobuf:"bytes,2,rep,name=dirs" json:"dirs,omitempty"`
	Symlinks []*Symlink `protobuf:"bytes,3,rep,name=symlinks" json:"symlinks,omitempty"`
	Size     int64      `protobuf:"varint,16,opt,name=size" json:"size,omitempty"`
}

func (m *Container) Reset()                    { *m = Container{} }
func (m *Container) String() string            { return proto.CompactTextString(m) }
func (*Container) ProtoMessage()               {}
func (*Container) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Container) GetFiles() []*File {
	if m != nil {
		return m.Files
	}
	return nil
}

func (m *Container) GetDirs() []*Dir {
	if m != nil {
		return m.Dirs
	}
	return nil
}

func (m *Container) GetSymlinks() []*Symlink {
	if m != nil {
		return m.Symlinks
	}
	return nil
}

type Dir struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Mode uint32 `protobuf:"varint,2,opt,name=mode" json:"mode,omitempty"`
}

func (m *Dir) Reset()                    { *m = Dir{} }
func (m *Dir) String() string            { return proto.CompactTextString(m) }
func (*Dir) ProtoMessage()               {}
func (*Dir) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type File struct {
	Path   string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Mode   uint32 `protobuf:"varint,2,opt,name=mode" json:"mode,omitempty"`
	Size   int64  `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	Offset int64  `protobuf:"varint,4,opt,name=offset" json:"offset,omitempty"`
}

func (m *File) Reset()                    { *m = File{} }
func (m *File) String() string            { return proto.CompactTextString(m) }
func (*File) ProtoMessage()               {}
func (*File) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Symlink struct {
	Path string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Mode uint32 `protobuf:"varint,2,opt,name=mode" json:"mode,omitempty"`
	Dest string `protobuf:"bytes,3,opt,name=dest" json:"dest,omitempty"`
}

func (m *Symlink) Reset()                    { *m = Symlink{} }
func (m *Symlink) String() string            { return proto.CompactTextString(m) }
func (*Symlink) ProtoMessage()               {}
func (*Symlink) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*Container)(nil), "io.itch.wharf.tlc.Container")
	proto.RegisterType((*Dir)(nil), "io.itch.wharf.tlc.Dir")
	proto.RegisterType((*File)(nil), "io.itch.wharf.tlc.File")
	proto.RegisterType((*Symlink)(nil), "io.itch.wharf.tlc.Symlink")
}

var fileDescriptor0 = []byte{
	// 253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x91, 0xcf, 0x4a, 0x03, 0x31,
	0x10, 0xc6, 0x89, 0xd9, 0x56, 0x3b, 0x52, 0xd0, 0x1c, 0x6a, 0xf0, 0x54, 0xf6, 0xb4, 0x08, 0x8d,
	0xa0, 0xe0, 0x03, 0xf8, 0xef, 0x01, 0xe2, 0xad, 0xb7, 0xb5, 0x9b, 0x65, 0x07, 0xb7, 0x9b, 0x92,
	0x04, 0x44, 0x1f, 0xcb, 0x27, 0x74, 0x32, 0x2d, 0xf5, 0x60, 0x0f, 0x7a, 0x58, 0xf8, 0x76, 0xbe,
	0x5f, 0xbe, 0xf9, 0x42, 0x60, 0x9a, 0xfa, 0xd5, 0x35, 0x7d, 0x66, 0x13, 0x7c, 0xf2, 0xea, 0x1c,
	0xbd, 0xc1, 0xb4, 0xea, 0xcc, 0x7b, 0x57, 0x87, 0xd6, 0x90, 0x51, 0x7e, 0x09, 0x98, 0x3c, 0xf8,
	0x21, 0xd5, 0x38, 0xb8, 0xa0, 0x16, 0x30, 0x6a, 0xb1, 0x77, 0x51, 0x8b, 0xb9, 0xac, 0x4e, 0x6f,
	0x2e, 0xcc, 0xaf, 0x03, 0xe6, 0x99, 0x7c, 0xbb, 0xa5, 0xd4, 0x15, 0x14, 0x0d, 0x86, 0xa8, 0x8f,
	0x98, 0x9e, 0x1d, 0xa0, 0x1f, 0x31, 0x58, 0x66, 0xd4, 0x1d, 0x9c, 0xc4, 0x8f, 0x75, 0x8f, 0xc3,
	0x5b, 0xd4, 0x92, 0xf9, 0xcb, 0x03, 0xfc, 0xcb, 0x16, 0xb1, 0x7b, 0x56, 0x29, 0x28, 0x22, 0x7e,
	0x3a, 0x7d, 0x36, 0x17, 0x95, 0xb4, 0xac, 0xcb, 0x05, 0x48, 0x0a, 0xce, 0xd6, 0xa6, 0x4e, 0x1d,
	0x95, 0x15, 0xd5, 0xc4, 0xb2, 0xce, 0xb3, 0xb5, 0x6f, 0x1c, 0x55, 0x12, 0xd5, 0xd4, 0xb2, 0x2e,
	0x97, 0x50, 0xe4, 0xd6, 0x7f, 0xe5, 0xf7, 0x2b, 0xe5, 0xcf, 0x4a, 0x35, 0x83, 0xb1, 0x6f, 0xdb,
	0xe8, 0x92, 0x2e, 0x78, 0xba, 0xfb, 0x2b, 0x9f, 0xe0, 0x78, 0xd7, 0xf9, 0x3f, 0xf1, 0x8d, 0x8b,
	0x89, 0xe3, 0x89, 0xcb, 0xfa, 0x7e, 0xb4, 0x94, 0x74, 0xfd, 0xd7, 0x31, 0xbf, 0xd3, 0xed, 0x77,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xe6, 0x40, 0x7f, 0x6b, 0xb8, 0x01, 0x00, 0x00,
}
